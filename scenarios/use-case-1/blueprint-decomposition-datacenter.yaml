tosca_definitions_version: tosca_simple_yaml_1_0

description: |
    Use case: E-LAN between enterprise and datacenter.
    
    This is the decomposition of the master blueprint for the datacenter
    NFV-O.
    
    The topology contains the datacenter nodes and NFVs, including the
    virtual link to the WAN. However, it does not contain anything
    related to the forwarding graph: that is for the GS-O to use in
    order to compose the commands for the SDN-O.

metadata:
    id: use-case-1-decomposition-dc
    vendor: Open-O
    version: 1.0

imports:
    - ../common/open-o-types.yaml
    - ../common/my-brand-types.yaml

topology_template:
    inputs:
        flavor:
            description: |
                The OpenStack virtual machine flavor. For simplicity,
                we'll just use one flavor for all our machines.
            type: string
            default: m1.large
    
    node_templates:

        # WAN

        wan:
            description: |
                The WAN is a "black box" as far as we're concerned
                here. It is an E-Line (point-to-point carrier
                Ethernet) that is configured at the SDN level.
            type: tosca.nodes.nfv.VL.ELine

        # Datacenter

        dc_connection_point:
            description: |
                Virtual connection point at the datacenter.
                
                Like the PoP connection point, it is also virtually
                bound to the E-Line (SDN).
            type: tosca.nodes.nfv.CP
            requirements:
                wan:
                    relationship: tosca.relationships.nfv.VirtualBindsTo
                    node: wan

        dc_gateway:
            description: |
                For simplicity, we'll create the datacenter gateway
                here as a router. In real scenarios, it would be a more
                complex VNF that can handle complex service chains
                (with load balancing of many servers, caching, fault
                tolerance, authentication, etc.).
            type: my-brand.VirtualRouter
            requirements:
                virtual_uplink:
                    relationship: tosca.relationships.nfv.VirtualLinksTo
                    node: dc_connection_point
                dc_service_chain:
                    relationship: tosca.relationships.ConnectsTo
                    node: database_server
                host:
                    relationships: tosca.relationships.HostedOn
                    node: dc_vnf_host

        database_server:
            description: |
                To keep this example simple, our datacenter service
                chain is a single database server.
                
                TOSCA of course allows for very rich and detailed
                modeling of complex service chains, supporting
                cloud security groups, scalability, healing, etc.
            type: tosca.nodes.Database
            requirements:
                host:
                    relationships: tosca.relationships.HostedOn
                    node: dc_database_host

        dc_vnf_host:
            description: |
                For simplicity, we'll run all our VNFs on a one host.
            type: open-o.openstack.Compute
            properties:
                flavor: { get_input: flavor }

        dc_database_host:
            type: open-o.openstack.Compute
            properties:
                flavor: { get_input: flavor }
