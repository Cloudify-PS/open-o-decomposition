tosca_definitions_version: tosca_simple_yaml_1_0

description: |
    Use case: E-LAN between enterprise and datacenter.
    
    In this scenario the client has an office with an enterprise LAN and
    the requirement is to provide LAN access to a database server
    sitting at a remote datacenter over a carrier WAN connection  We
    will achieve this by creating and configuring standard VNFs from the
    Open-O catalog and use SDN to enable traffic.
    
    (In real scenarios, the service chain would likely be more complex
    than a single database server, but our purpose here is to focus on
    the forwarding graph.)
    
    Our route begins at the client's thin CPE (Customer Premises
    Equipment). We'll need two VNFs: a vCPE to add configurable routing
    functionality over the thin CPE, and a VNF firewall to isolate the
    enterprise. At the datacenter, we'll need one VNF: a gateway to
    provide secure access to the database server (and possibly other
    client servers in the future). Together, these nodes represent our
    VNF forwarding graph (VNFFG).
    
    For this straightforward use case, we will need to configure each
    VNF to forward to the next one in a series, forming a linear
    forwarding path. Though each VNF has its own set of features and
    configurations, TOSCA allows us to abstract them all as general
    relationships.
    
    Our challenge is that the vCPE and firewall need to be deployed at
    the PoP (Point of Presence) location, while the gateway will be at
    the datacenter. Each location has its own CloudStack resources and
    its own Open-O NFV-O instance. Our Open-O GS-O will know how to
    decompose this blueprint and send the correct blueprint to each
    NFV-O. Once all the NFVs are created and configured, the Open-O
    SDN-O will be called in order to configure and enable traffic
    between them.
    
    NOTE: This is a work in progress, as we together learn how to
    represent real-world scenarios in Open-O-compatible topologies.

metadata:
    id: use-case-1
    vendor: Open-O
    version: 1.0

imports:
    - open-o-types.yaml
    - my-brand-types.yaml

topology_template:
    inputs:
        enterprise_gateway_ip:
            type: string
    
    node_templates:

        # Enterprise
    
        enterprise_lan:
            description: |
                We do not configure the enterprise LAN from this
                blueprint, however we include it here in order to
                complete the topology.
            type: tosca.nodes.network.Network
            properties:
                gateway_ip: { get_input: enterprise_gateway_ip }

        enterprise_cpe:
            description: |
                The router sitting at the customer site ("thin" CPE).
            type: my-brand.EnterpriseRouter
            requirements:
                lan:
                    relationship: tosca.relationships.network.LinksTo
                    node: enterprise_lan
                uplink:
                    relationship: tosca.relationships.ConnectsTo
                    node: v_cpe

        # PoP

        v_cpe:
            description: |
                Customer's virtual CPE at the PoP.
                
                (Note that this is a logical instance of the vCPE,
                representing our route for this particular service
                chain. The same actual router instance could in fact
                support many customer service chains simultaneously.)
            type: my-brand.VirtualRouter
            requirements:
                uplink:
                    relationship: tosca.relationships.ConnectsTo
                    node: v_firewall

        v_firewall:
            description: |
                Customer's virtual firewall at the PoP.
                
                Note that we require two uplinks from here: the physical
                uplink to the WAN, and the "virtual" link to a
                the connection point used for composing a forwarding
                graph. 
            type: my-brand.VirtualFirewall
            requirements:
                uplink:
                    relationship: tosca.relationships.network.LinksTo
                    node: wan
                virtual_uplink:
                    relationship: tosca.relationships.nfv.VirtualLinksTo
                    node: pop_connection_point
        
        pop_connection_point:
            description: |
                Virtual connection point at the PoP.
                
                This is where the TOSCA forwarding path meets the
                SDN world, manifest here as two required relationships:
                to the connection point at the datacenter (forwarding
                path) and to the E-Line (SDN).
            type: tosca.nodes.nfv.CP
            requirements:
                forward:
                    relationship: tosca.relationships.nfv.ForwardsTo
                    node: dc_connection_point
                wan:
                    relationship: tosca.relationships.nfv.VirtualBindsTo
                    node: wan

        # WAN

        wan:
            description: |
                The WAN is a "black box" as far as we're concerned
                here. It is an E-Line (point-to-point carrier
                Ethernet) that is configured at the SDN level.
            type: tosca.nodes.nfv.VL.ELine

        # Datacenter

        dc_connection_point:
            description: |
                Virtual connection point at the datacenter.
                
                Like the PoP connection point, it is also virtually
                bound to the E-Line (SDN).
            type: tosca.nodes.nfv.CP
            requirements:
                wan:
                    relationship: tosca.relationships.nfv.VirtualBindsTo
                    node: wan

        dc_gateway:
            description: |
                For simplicity, we'll create the datacenter gateway
                here as a router. In real scenarios, it would be a more
                complex VNF that can handle complex service chains
                (with load balancing of many servers, caching, fault
                tolerance, authentication, etc.).
            type: my-brand.VirtualRouter
            requirements:
                virtual_uplink:
                    relationship: tosca.relationships.nfv.VirtualLinksTo
                    node: dc_connection_point
                service_chain:
                    relationship: tosca.relationships.ConnectsTo
                    node: database_server

        database_server:
            description: |
                As mentioned, to keep this example simple our service
                chain is a single database server.
                
                TOSCA of course allows for very rich and detailed
                modeling of complex service chains, supporting
                cloud security groups, scalability, healing, etc.
            type: tosca.nodes.Database

        # Forwarding graph
        
        # The entire graph is composed of two linear forwarding paths
        # (one at the PoP and one at the datacenter), with each topology
        # deployed by a separate NFV-O. The SDN-O will enable the
        # complete graph.
    
        pop_forwarding_path:
            description: |
                The forwarding path at the PoP. The edge of the
                forwarding path is a connection point virtually linked
                to a connection point at the datacenter, together
                forming a complete forwarding graph.
            type: open-o.LinearFP
            requirements:
                node1:
                    node: enterprise_cpe
                node2:
                    node: v_cpe
                node3:
                    node: v_firewall
                node4:
                    node: pop_connection_point

        dc_forwarding_path:
            description: |
                The forwarding path at the datacenter.
            type: open-o.LinearFP
            requirements:
                node1:
                    node: dc_connection_point
                node2:
                    node: dc_gateway
                node3:
                    node: database_server

    groups:
        vnnfg:
            description: |
                The VNF forwarding graph is a group containing both
                forwarding paths.
                
                In terms of composition/decomposition, it will tell
                the GS-O how to combine the results from the PoP NFV-O
                and the datacenter NFV-O into commands to send to the
                SDN-O in order to enable the complete graph.
            type: tosca.groups.nfv.VNFFG
            members: [pop_forwarding_path, dc_forwarding_path]
            properties:
                vendor: Open-O
                version: 1.0
                number_of_endpoints: 2
                dependent_virtual_link: []
                connection_point: [pop_connection_point, dc_connection_point]
                constituent_vnfs: [v_cpe, v_firewall, dc_gateway]
